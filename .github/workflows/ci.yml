name: CD
on:
  push:
  workflow_dispatch:


# Các biến môi trường:
#   DOJO_PRODUCT: ứng với tên Product trong DefectDojo
#   DOJO_ENGAGEMENT: ứng với tên Engagement trong Product
#   SONAR_PROJECT: projectKey của project trong SonarQube
env:
  DOJO_PRODUCT: 'WebGoat' 
  DOJO_ENGAGEMENT: 'Beta CD'
  TARGET: http://172.17.0.1:8081
  HEALTH_CHECK: 172.17.0.1:8081
  ENDPOINT: "/WebGoat"
  TIMEOUT: 60 

jobs:

  wait-for-it:
    name: Wait for a service to be ready
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: run Wait-for-It
        uses: hoainamnv34/Wait-for-It@main
        with:
          host: '${{env.HEALTH_CHECK}}' 
          timeout: '${{env.TIMEOUT}}' 

  WAST:
    name: Web Application Security Testing
    runs-on: self-hosted
    needs: wait-for-it
    steps:
      - name: run pentest
        uses: hoainamnv34/pentest@main
        with:
          target: '${{env.TARGET}}' 
          endpoint: '${{env.ENDPOINT}}' 
          zap_http: ${{vars.ZAP_HTTP}}
          zap_https: ${{vars.ZAP_HTTP}}
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
          name: wast-report
          path: ./report.xml
      - name: remove report
        run: rm ./report.xml
          
  import-WAST:
    needs: WAST
    name: Import WAST
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: wast-report
          path: .
      - name: import to DefectDojo
        uses: hoainamnv34/import-to-DefectDojo@main
        with:
          host: '${{vars.DEFECTDOJO_URL}}'
          product: ${{env.DOJO_PRODUCT}}
          engagement: ${{env.DOJO_ENGAGEMENT}}
          scan: 'ZAP Scan'
          report: 'report.xml'
          token:  ${{ secrets.DEFECT_DOJO_API_TOKEN }}
          active: "True"
          verified: "True"
          test_title: "Web Application Security Testing"
          close_old_findings: "True"
          close_old_findings_product_scope: "True"
          branch_tag: "${{ github.event.base_ref }}"
          commit_hash: "${{ github.sha }}"
  
  SAS:
    name: Security API Scanning
    runs-on: self-hosted
    needs: wait-for-it
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: run jmeter
        uses: hoainamnv34/jmeter@main
        with:
          target: '${{env.TARGET}}'  
          zap-host: ${{vars.ZAP_HTTP}}
          test-file: ./HTTP_Request.jmx
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
          name: sas-report
          path: report.xml
      - name: remove report
        run: rm ./report.xml
          
  import-SAS:
    needs: SAS
    name: Import SAS
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: sas-report
          path: .
      - name: import to DefectDojo
        uses: hoainamnv34/import-to-DefectDojo@main
        with:
          host: '${{vars.DEFECTDOJO_URL}}'
          product: ${{env.DOJO_PRODUCT}}
          engagement: ${{env.DOJO_ENGAGEMENT}}
          scan: 'ZAP Scan'
          report: 'report.xml'
          token:  ${{ secrets.DEFECT_DOJO_API_TOKEN }}
          active: "True"
          verified: "True"
          test_title: "Security API Scanning"
          close_old_findings: "True"
          close_old_findings_product_scope: "True"
          branch_tag: "${{ github.event.base_ref }}"
          commit_hash: "${{ github.sha }}"
          
  
